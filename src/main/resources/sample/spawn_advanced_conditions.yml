# ===========================================
# 高度なスポーン条件の例
# src/main/resources/sample/spawn_advanced_conditions.yml
# ===========================================
#
# CEL式を使用した柔軟なスポーン条件設定
# すべての条件がtrueの場合のみスポーンが実行される

# ========== 時間帯による条件 ==========
NightOnlySpawn:
  mob: "ZombieWarrior"
  spawnRate: 100      # 5秒ごと
  maxNearby: 10

  # 夜間のみスポーン
  conditions:
    - "world.isNight"
    - "!world.hasStorm"  # 雨ではない

  region:
    type: "circle"
    center:
      x: 0
      y: 64
      z: 0
    radius: 100.0

# ========== 満月の夜 ==========
FullMoonWerewolf:
  mob: "Werewolf"
  spawnRate: 200      # 10秒ごと
  maxNearby: 3

  # 満月の夜のみ
  conditions:
    - "world.isNight"
    - "environment.moonPhase == 0"  # 満月

  region:
    type: "circle"
    radius: 150.0

# ========== プレイヤー数による条件 ==========
PlayerCountScaling:
  mob: "DefensiveMob"
  spawnRate: 60       # 3秒ごと
  maxNearby: 20

  # プレイヤーが3人以上いる場合のみ
  conditions:
    - "nearbyPlayers.count >= 3"
    - "nearbyPlayers.maxLevel >= 10"  # 最大レベルが10以上

  region:
    type: "box"
    min:
      x: -100
      y: 60
      z: -100
    max:
      x: 100
      y: 80
      z: 100

# ========== プレイヤーレベルによる条件 ==========
HighLevelArea:
  mob: "EliteMob"
  spawnRate: 300      # 15秒ごと
  maxNearby: 5

  # 平均レベルが20以上の場合のみ
  conditions:
    - "nearbyPlayers.avgLevel >= 20"
    - "nearbyPlayers.count > 0"

  region:
    type: "circle"
    radius: 50.0

# ========== スポーン数による条件 ==========
LimitedSpawn:
  mob: "RareBoss"
  spawnRate: 1200     # 60秒ごと
  maxNearby: 1

  # 既にスポーンしていない場合のみ
  conditions:
    - "spawn.currentCount == 0"
    - "world.isNight"
    - "nearbyPlayers.count >= 2"  # 2人以上のプレイヤーが必要

  location:
    world: "world"
    x: 0
    y: 70
    z: 0

# ========== 天候による条件 ==========
ThunderStormMob:
  mob: "StormElemental"
  spawnRate: 80
  maxNearby: 5

  # 雷雨時のみ
  conditions:
    - "world.isThundering"
    - "world.isDay || world.isNight"  # 常時（念のため）

  region:
    type: "circle"
    radius: 200.0

# ========== 複雑な条件の組み合わせ ==========
ComplexConditionBoss:
  mob: "ComplexBoss"
  spawnRate: 600      # 30秒ごと
  maxNearby: 1

  # 複数の条件を組み合わせ
  conditions:
    # 夜間または満月
    - "world.isNight || environment.moonPhase == 0"

    # プレイヤーが4人以上かつ平均レベル15以上
    - "nearbyPlayers.count >= 4 && nearbyPlayers.avgLevel >= 15"

    # 現在スポーンしていない
    - "spawn.currentCount < spawn.maxNearby"

    # 難易度がHARD以上
    - "world.difficulty == 'HARD' || world.difficulty == 'HARDCORE'"

  region:
    type: "circle"
    center:
      x: 100
      y: 64
      z: 100
    radius: 50.0

# ========== 時刻による詳細制御 ==========
MidnightSpawn:
  mob: "MidnightGhost"
  spawnRate: 100
  maxNearby: 3

  # 深夜0時付近のみ（18000±1000 tick）
  conditions:
    - "environment.tickOfDay >= 17000 && environment.tickOfDay <= 19000"

  region:
    type: "circle"
    radius: 100.0

# ========== 曜日サイクル（7日ごと） ==========
WeeklyCycle:
  mob: "WeeklyBoss"
  spawnRate: 1200
  maxNearby: 1

  # 7日サイクルの特定日（例: 7で割って0の日）
  conditions:
    - "environment.dayOfCycle % 7 == 0"
    - "world.isNight"
    - "nearbyPlayers.count >= 3"

  location:
    world: "world"
    x: 0
    y: 100
    z: 0

# ========== 環境と時間の組み合わせ ==========
DynamicEnvironmentSpawn:
  mob: "EnvironmentalMob"
  spawnRate: 150
  maxNearby: 8

  # 昼間かつ晴天、または夜間かつ雨天
  conditions:
    - "(world.isDay && !world.hasStorm) || (world.isNight && world.hasStorm)"
    - "nearbyPlayers.count > 0"

  region:
    type: "box"
    min:
      x: -50
      y: 60
      z: -50
    max:
      x: 50
      y: 100
      z: 50

# ========== レベル帯別スポーン ==========
BeginnerArea:
  mob: "WeakMob"
  spawnRate: 60
  maxNearby: 15

  # 初心者エリア（平均レベル1-10）
  conditions:
    - "nearbyPlayers.count > 0"
    - "nearbyPlayers.avgLevel >= 1 && nearbyPlayers.avgLevel <= 10"

  region:
    type: "circle"
    center:
      x: 0
      y: 64
      z: 0
    radius: 80.0

IntermediateArea:
  mob: "MediumMob"
  spawnRate: 80
  maxNearby: 10

  # 中級エリア（平均レベル11-25）
  conditions:
    - "nearbyPlayers.count > 0"
    - "nearbyPlayers.avgLevel >= 11 && nearbyPlayers.avgLevel <= 25"

  region:
    type: "circle"
    center:
      x: 200
      y: 64
      z: 200
    radius: 100.0

AdvancedArea:
  mob: "StrongMob"
  spawnRate: 100
  maxNearby: 5

  # 上級エリア（平均レベル26以上）
  conditions:
    - "nearbyPlayers.count > 0"
    - "nearbyPlayers.avgLevel >= 26"

  region:
    type: "circle"
    center:
      x: 500
      y: 64
      z: 500
    radius: 120.0

# ========== プレイヤー数によるスケーリング ==========
ScalingSpawn:
  mob: "ScalingMob"
  spawnRate: 100
  maxNearby: 50  # 最大50体

  # プレイヤー数に応じて最大スポーン数を調整
  # 実際の最大数は spawn.maxNearby だが、条件でプレイヤー数を考慮
  conditions:
    - "nearbyPlayers.count > 0"
    - "spawn.currentCount < (nearbyPlayers.count * 5)"  # プレイヤー1人につき5体まで

  region:
    type: "circle"
    radius: 150.0

# ========== 利用可能な変数とメソッド ==========
#
# world.* - ワールド情報
#   - world.name: String - ワールド名
#   - world.time: Long - ワールド時刻 (0-24000)
#   - world.isDay: Boolean - 昼間かどうか
#   - world.isNight: Boolean - 夜間かどうか
#   - world.hasStorm: Boolean - 雨が降っているか
#   - world.isThundering: Boolean - 雷雨かどうか
#   - world.difficulty: String - 難易度 (PEACEFUL, EASY, NORMAL, HARD)
#   - world.playerCount: Int - ワールド内のプレイヤー数
#
# environment.* - 環境情報
#   - environment.moonPhase: Int - 月の満ち欠け (0=満月, 4=新月)
#   - environment.dayOfCycle: Int - 経過日数
#   - environment.tickOfDay: Int - 1日のtick (0-24000)
#
# nearbyPlayers.* - 近くのプレイヤー情報
#   - nearbyPlayers.count: Int - プレイヤー数
#   - nearbyPlayers.maxLevel: Int - 最大レベル
#   - nearbyPlayers.minLevel: Int - 最小レベル
#   - nearbyPlayers.avgLevel: Double - 平均レベル
#
# spawn.* - スポーン情報
#   - spawn.mob: String - スポーンするMob ID
#   - spawn.maxNearby: Int - 最大スポーン数
#   - spawn.chunkRadius: Int - チャンク半径
#   - spawn.currentCount: Int - 現在のスポーン数
#
# math.* - 数学関数
#   - math.abs(x), math.max(a,b), math.min(a,b)
#   - math.floor(x), math.ceil(x), math.round(x)
#   - math.sqrt(x), math.pow(base, exp)
#   - math.PI, math.E
#
# random.* - ランダム関数
#   - random.range(min, max): Double
#   - random.int(min, max): Int
#   - random.chance(probability): Boolean
#   - random.boolean(): Boolean
#
# string.* - 文字列関数
#   - string.contains(str, substr): Boolean
#   - string.startsWith(str, prefix): Boolean
#   - string.endsWith(str, suffix): Boolean
