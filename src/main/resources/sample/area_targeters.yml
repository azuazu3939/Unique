# Area Targeterのデモンストレーション
# AreaTargeterは CIRCLE, CONE, BOX, DONUT 形状でターゲットを選択
# すべてのパラメータはCEL式で動的に計算可能

# ======================================
# CIRCLE (円形) エリアターゲット
# ======================================
CircleAreaMob:
  Type: BLAZE
  Display: '&cCircle Area Example'
  Health: 100

  Skills:
    OnTimer:
      # 固定半径の円形範囲攻撃
      - name: FixedCircle
        interval: 5s
        targeter:
          type: Area
          shape: CIRCLE
          radius: "10.0"          # 半径10ブロック
          targetPlayers: true
          targetMobs: false

      # CEL式で動的に半径を変更
      - name: DynamicCircle
        interval: 5s
        targeter:
          type: Area
          shape: CIRCLE
          radius: "5.0 + nearbyPlayers.count * 2"  # プレイヤー数で拡大
          filter: "target.gameMode == 'SURVIVAL'"   # サバイバルモードのみ

# ======================================
# CONE (円錐) エリアターゲット
# ======================================
ConeAreaMob:
  Type: GHAST
  Display: '&6Cone Area Example'
  Health: 120

  Skills:
    OnTimer:
      # 前方円錐範囲攻撃
      - name: ForwardCone
        interval: 3s
        targeter:
          type: Area
          shape: CONE
          radius: "15.0"          # 距離15ブロック
          angle: "45.0"           # 角度45度（片側）
          direction: FORWARD      # 前方向
          targetPlayers: true
          filter: "distance.horizontal(source.location, target.location) > 3.0"  # 至近距離除外

      # 動的角度の円錐攻撃
      - name: ScalingCone
        interval: 5s
        targeter:
          type: Area
          shape: CONE
          radius: "20.0"
          angle: "30.0 + nearbyPlayers.count * 5"  # プレイヤー数で角度拡大
          direction: FORWARD

# ======================================
# BOX (箱形) エリアターゲット
# ======================================
BoxAreaMob:
  Type: WITHER_SKELETON
  Display: '&9Box Area Example'
  Health: 150

  Skills:
    OnTimer:
      # 前方の箱形範囲
      - name: FrontBox
        interval: 4s
        targeter:
          type: Area
          shape: BOX
          width: "8.0"            # 幅8ブロック
          height: "5.0"           # 高さ5ブロック
          depth: "12.0"           # 奥行き12ブロック
          direction: FORWARD      # 前方向
          targetPlayers: true

      # CEL式で動的サイズ
      - name: DynamicBox
        interval: 6s
        targeter:
          type: Area
          shape: BOX
          width: "math.min(15.0, 5.0 + nearbyPlayers.avgLevel / 2)"
          height: "4.0"
          depth: "10.0 + random.range(0, 5.0)"  # ランダム奥行き

# ======================================
# DONUT (ドーナツ形) エリアターゲット
# ======================================
DonutAreaMob:
  Type: ENDERMAN
  Display: '&5Donut Area Example'
  Health: 100

  Skills:
    OnTimer:
      # 中央を除外した円形範囲
      - name: DonutAttack
        interval: 5s
        targeter:
          type: Area
          shape: DONUT
          innerRadius: "5.0"      # 内側半径5ブロック
          radius: "15.0"          # 外側半径15ブロック（radiusが外側）
          targetPlayers: true

      # 動的ドーナツ範囲
      - name: DynamicDonut
        interval: 7s
        targeter:
          type: Area
          shape: DONUT
          innerRadius: "3.0 + nearbyPlayers.count"
          radius: "10.0 + nearbyPlayers.count * 2"
          filter: "target.health > target.maxHealth * 0.5"  # HP50%以上のみ

# ======================================
# 複合例: フィルターと組み合わせ
# ======================================
AdvancedAreaMob:
  Type: EVOKER
  Display: '&d&lAdvanced Area Boss'
  Health: 200

  Skills:
    OnTimer:
      # 円形 + 複雑なフィルター
      - name: SelectiveCircle
        interval: 3s
        targeter:
          type: Area
          shape: CIRCLE
          radius: "12.0"
          filter: >
            target.gameMode == 'SURVIVAL' &&
            target.health < target.maxHealth * 0.7 &&
            !target.isFlying

      # 円錐 + 距離計算フィルター
      - name: ConeWithDistance
        interval: 4s
        targeter:
          type: Area
          shape: CONE
          radius: "20.0"
          angle: "math.toRadians(60)"  # 度数をラジアンに変換（実際は度数法で動作）
          direction: FORWARD
          filter: >
            distance.horizontal(source.location, target.location) >= 5.0 &&
            distance.horizontal(source.location, target.location) <= 18.0

      # ボックス + プレイヤーレベルフィルター
      - name: BoxLevelCheck
        interval: 5s
        targeter:
          type: Area
          shape: BOX
          width: "10.0"
          height: "6.0"
          depth: "15.0"
          direction: FORWARD
          filter: "target.level >= nearbyPlayers.avgLevel"  # 平均レベル以上のみ

# ======================================
# 実践例: HP段階で範囲を変更
# ======================================
PhaseChangingMob:
  Type: RAVAGER
  Display: '&4&lPhase Boss'
  Health: 300

  Skills:
    OnTimer:
      # フェーズ1: HP > 70% - 小さい円
      - name: Phase1Circle
        interval: 2s
        condition: "entity.health > entity.maxHealth * 0.7"
        targeter:
          type: Area
          shape: CIRCLE
          radius: "8.0"

      # フェーズ2: HP 30-70% - 中程度の円錐
      - name: Phase2Cone
        interval: 2s
        condition: "entity.health > entity.maxHealth * 0.3 && entity.health <= entity.maxHealth * 0.7"
        targeter:
          type: Area
          shape: CONE
          radius: "15.0"
          angle: "50.0"
          direction: FORWARD

      # フェーズ3: HP < 30% - 大きいドーナツ
      - name: Phase3Donut
        interval: 2s
        condition: "entity.health <= entity.maxHealth * 0.3"
        targeter:
          type: Area
          shape: DONUT
          innerRadius: "3.0"
          radius: "20.0"
