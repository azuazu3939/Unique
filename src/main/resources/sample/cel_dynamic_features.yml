# ===========================================
# CEL動的機能 総合サンプル
# src/main/resources/sample/cel_dynamic_features.yml
# ===========================================
#
# フェーズ1で実装された3つの主要機能：
# 1. Effect動的パラメータ (Damage, Heal, PotionEffect)
# 2. MobDefinition動的ステータス (Health, Damage)
# 3. Drop完全CEL化 (amount, chance)

# ========== 例1: プレイヤー数スケーリングボス ==========
PlayerScalingBoss:
  Type: WITHER_SKELETON
  Display: '&4&lScaling Boss'

  # プレイヤー数でHP・ダメージがスケール
  Health: "100 + (nearbyPlayers.count * 50)"  # 1人につき+50HP
  Damage: "10 + (nearbyPlayers.avgLevel * 0.5)"  # レベルでダメージ増加

  AI:
    MovementSpeed: 0.3
    FollowRange: 30

  Skills:
    OnTimer:
      # HPに比例したダメージスキル
      - name: ScalingAttack
        interval: 100  # 5秒
        targeter:
          type: NearestPlayer
          range: 20
        skills:
          - skill: DynamicDamage
        meta:
          sync: true

  drops:
    # プレイヤーレベルでドロップ数増加
    - item: DIAMOND
      amount: "math.max(1, nearbyPlayers.maxLevel / 10)"  # レベル10につき1個
      chance: "0.2 + (nearbyPlayers.count * 0.1)"  # 人数で確率上昇
      condition: "killer.gameMode == 'SURVIVAL'"

# ========== 例2: 時間帯適応Mob ==========
TimeAdaptiveMob:
  Type: ZOMBIE
  Display: '&8&lNight Terror'

  # 夜間は強化
  Health: "world.isNight ? 150.0 : 80.0"
  Damage: "world.isNight ? 15.0 : 8.0"

  Skills:
    OnTimer:
      # 夜間のみ強力攻撃
      - name: NightAssault
        interval: 60
        condition: "world.isNight"
        targeter:
          type: RadiusPlayers
          range: 15.0
        skills:
          - skill: NightDamage
        meta:
          sync: true

  drops:
    # 満月でレアドロップ
    - item: NETHER_STAR
      amount: "1"
      chance: "environment.moonPhase == 0 ? 0.5 : 0.05"  # 満月50%, 他5%

# ========== 例3: HP段階別Mob ==========
PhaseChangeMob:
  Type: ENDER_DRAGON
  Display: '&5&lPhase Dragon'
  Health: "500"

  Skills:
    OnTimer:
      # HP70%以上: 弱攻撃
      - name: Phase1
        interval: 80
        condition: "entity.health > entity.maxHealth * 0.7"
        targeter:
          type: NearestPlayer
          range: 30
        skills:
          - skill: WeakAttack

      # HP30-70%: 中攻撃
      - name: Phase2
        interval: 60
        condition: "entity.health > entity.maxHealth * 0.3 && entity.health <= entity.maxHealth * 0.7"
        targeter:
          type: RadiusPlayers
          range: 20.0
        skills:
          - skill: MediumAttack

      # HP30%以下: 強攻撃
      - name: Phase3
        interval: 40
        condition: "entity.health <= entity.maxHealth * 0.3"
        targeter:
          type: Area
          shape: CIRCLE
          radius: "25.0"
        skills:
          - skill: StrongAttack

  drops:
    # HP低いほど多くドロップ
    - item: DIAMOND
      amount: "math.ceil((1 - entity.health / entity.maxHealth) * 10)"  # 最大10個
      chance: "1.0"

# ========== 例4: 距離適応Mob ==========
RangeAdaptiveMob:
  Type: SKELETON
  Display: '&7&lRange Fighter'
  Health: "100"

  Skills:
    OnTimer:
      # 距離に応じたダメージ
      - name: DistanceAttack
        interval: 40
        targeter:
          type: NearestPlayer
          range: 30
        skills:
          - skill: DistanceDamage
        meta:
          sync: true

# ========== スキル定義 ==========

# プレイヤー数スケーリング攻撃
DynamicDamage:
  type: Damage
  effects:
    # ターゲットの最大HPの30%ダメージ
    - type: Damage
      amount: "target.maxHealth * 0.3"
    - type: Particle
      particle: CRIT_MAGIC
      count: 20

# 夜間強化攻撃
NightDamage:
  type: Damage
  effects:
    # 夜間は2倍ダメージ
    - type: Damage
      amount: "world.isNight ? 20.0 : 10.0"
    # 夜間のみデバフ
    - type: PotionEffect
      effect: WEAKNESS
      duration: "world.isNight ? 200 : 0"  # 夜10秒、昼0秒
      amplifier: "1"
    - type: Particle
      particle: SOUL_FIRE_FLAME
      count: "world.isNight ? 50 : 10"  # 夜間はパーティクル多め

# HP比例回復
HealBasedOnHP:
  type: Heal
  effects:
    # 失ったHP分を回復
    - type: Heal
      amount: "entity.maxHealth - entity.health"
    - type: Particle
      particle: HEART
      count: 30

# HP比例ダメージ
WeakAttack:
  type: Damage
  effects:
    - type: Damage
      amount: "15"
    - type: PotionEffect
      effect: SLOW
      duration: "100"
      amplifier: "0"

MediumAttack:
  type: Damage
  effects:
    - type: Damage
      amount: "25"
    # HP低いほど強いデバフ
    - type: PotionEffect
      effect: WEAKNESS
      duration: "200"
      amplifier: "math.floor((1 - entity.health / entity.maxHealth) * 2)"  # 0-2

StrongAttack:
  type: Damage
  effects:
    # 現在HPの50%ダメージ
    - type: Damage
      amount: "target.health * 0.5"
    - type: PotionEffect
      effect: POISON
      duration: "300"  # 15秒
      amplifier: "2"
    - type: Particle
      particle: DRAGON_BREATH
      count: 100

# 距離減衰ダメージ
DistanceDamage:
  type: Damage
  effects:
    # 距離に応じてダメージ減衰（30ブロックで0、0ブロックで30）
    - type: Damage
      amount: "30 * math.max(0, 1 - distance.horizontal(source.location, target.location) / 30.0)"
    - type: Particle
      particle: FLAME
      count: "math.ceil(distance.horizontal(source.location, target.location))"  # 距離に応じたパーティクル

# ========== 例5: 環境適応Mob ==========
EnvironmentMob:
  Type: WITCH
  Display: '&5&lWeather Witch'

  # 天候でステータス変化
  Health: "world.isThundering ? 200.0 : 100.0"
  Damage: "world.hasStorm ? 15.0 : 8.0"

  drops:
    - item: EMERALD
      amount: "world.isThundering ? 5 : 1"  # 雷雨時5倍
      chance: "1.0"

    - item: DIAMOND
      amount: "1-3"  # 範囲形式も引き続きサポート
      chance: "world.isThundering ? 0.8 : 0.2"

# ========== 例6: レベル帯スケーリング ==========
LevelTierMob:
  Type: IRON_GOLEM
  Display: '&fLevel Scaling Golem'

  # 平均レベルでスケール
  Health: "50 + (nearbyPlayers.avgLevel * 10)"  # レベル1につき+10HP
  Damage: "5 + (nearbyPlayers.avgLevel * 0.5)"

  Skills:
    OnTimer:
      - name: LevelAttack
        interval: 100
        targeter:
          type: NearestPlayer
          range: 20
        skills:
          - skill: LevelBasedDamage

LevelBasedDamage:
  type: Damage
  effects:
    # プレイヤーレベルに応じたダメージ
    - type: Damage
      amount: "10 + (target.level * 0.5)"
    # レベル高いほど強いデバフ
    - type: PotionEffect
      effect: SLOWNESS
      duration: "200"
      amplifier: "math.min(3, math.floor(target.level / 10))"  # レベル10ごとに+1、最大3

# ========== 例7: ランダム要素 ==========
RandomMob:
  Type: CREEPER
  Display: '&aRandom Creeper'

  # ランダムなHP
  Health: "50 + random.range(0, 100)"  # 50-150
  Damage: "5 + random.range(0, 10)"  # 5-15

  drops:
    # ランダムドロップ数
    - item: GUNPOWDER
      amount: "math.ceil(random.range(1, 5))"
      chance: "random.range(0.5, 1.0)"  # 50-100%

# ========== 利用可能なCEL変数・関数 ==========
#
# 【エンティティ情報】
# - entity.health: Double - 現在HP
# - entity.maxHealth: Double - 最大HP
# - entity.type: String - エンティティタイプ
# - target.health, target.maxHealth, target.level など（ターゲット時）
# - killer.level, killer.gameMode など（ドロップ時）
#
# 【ワールド情報】
# - world.isDay: Boolean - 昼間かどうか
# - world.isNight: Boolean - 夜間かどうか
# - world.hasStorm: Boolean - 雨が降っているか
# - world.isThundering: Boolean - 雷雨かどうか
# - world.time: Long - ワールド時刻
# - world.difficulty: String - 難易度
#
# 【環境情報】
# - environment.moonPhase: Int - 月の満ち欠け (0=満月, 4=新月)
# - environment.dayOfCycle: Int - 経過日数
# - environment.tickOfDay: Int - 1日のtick
#
# 【プレイヤー情報】
# - nearbyPlayers.count: Int - プレイヤー数
# - nearbyPlayers.maxLevel: Int - 最大レベル
# - nearbyPlayers.minLevel: Int - 最小レベル
# - nearbyPlayers.avgLevel: Double - 平均レベル
# - nearbyPlayerCount: Int - プレイヤー数（短縮形）
#
# 【数学関数】
# - math.abs(x), math.max(a,b), math.min(a,b)
# - math.floor(x), math.ceil(x), math.round(x)
# - math.sqrt(x), math.pow(base, exp)
# - math.PI, math.E
#
# 【ランダム関数】
# - random.range(min, max): Double - min～maxの乱数
# - random.int(min, max): Int - min～maxの整数乱数
# - random.chance(probability): Boolean - 確率判定
# - random.boolean(): Boolean - 50%でtrue/false
#
# 【距離関数】
# - distance.horizontal(pos1, pos2): Double - 水平距離
# - distance.between(pos1, pos2): Double - 3D距離
# - distance.squared(pos1, pos2): Double - 距離の二乗
#
# 【文字列関数】
# - string.contains(str, substr): Boolean
# - string.startsWith(str, prefix): Boolean
# - string.endsWith(str, suffix): Boolean
#
# 【条件演算子】
# - 三項演算子: condition ? trueValue : falseValue
# - AND: &&
# - OR: ||
# - NOT: !
# - 比較: ==, !=, <, >, <=, >=
